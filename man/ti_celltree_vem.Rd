% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ti_celltree.R, R/ti_container.R
\name{ti_celltree_vem}
\alias{ti_celltree_vem}
\alias{ti_celltree_vem}
\title{Inferring trajectories with cellTree}
\usage{

  ti_celltree_vem(run_environment = ifelse(is.null(getOption("dynwrap_run_environment")),
  "local", getOption("dynwrap_run_environment")), method = "VEM",
  sd_filter = 0.5, absolute_width = 0, width_scale_factor = 1.5,
  outlier_tolerance_factor = 0.1, rooting_method = "null", num_topics = 4,
  tot_iter = 1e+06, tolerance = 1e-05)


  ti_celltree_vem(run_environment = ifelse(is.null(getOption("dynwrap_run_environment")),
  "local", getOption("dynwrap_run_environment")), method = "VEM",
  sd_filter = 0.5, absolute_width = 0, width_scale_factor = 1.5,
  outlier_tolerance_factor = 0.1, rooting_method = "null", num_topics = 4,
  tot_iter = 1e+06, tolerance = 1e-05)
}
\arguments{
\item{run_environment}{In which environment to run the method, can be 'local', 'docker' or 'singularity'}

\item{method}{LDA inference method to use. Can be any unique prefix of ‘maptpx’, ‘Gibbs’ or ‘VEM’ (defaults to ‘maptpx’)}

\item{sd_filter}{Standard-deviation threshold below which genes should be removed from the data.}

\item{absolute_width}{Distance threshold below which a cell vertex is considered to be attached to a backbone vertex (see paper for more details).
By default, this threshold is computed dynamically, based on the distance distribution for each branch.}

\item{width_scale_factor}{A scaling factor for the dynamically-computed distance threshold (ignored if absolute_width is provided).
Higher values will result in less branches in the backbone tree, while lower values might lead to a large number of backbone branches.}

\item{outlier_tolerance_factor}{Proportion of vertices, out of the total number of vertices divided by the total number of branches,
that can be left at the end of the backbone tree-building algorithm.}

\item{rooting_method}{Method used to root the backbone tree. Must be one of: ‘null’, ‘longest.path’, ‘center.start.group’ or ‘average.start.group’.
‘longest.path' picks one end of the longest shortest-path between two vertices.
'center.start.group’ picks the vertex in the starting group with lowest mean-square-distance to the others.
‘average.start.group’ creates a new artificial vertex, as the average of all cells in the starting group.
‘null’ picks the best method based on the type of grouping and start group information available.}

\item{num_topics}{The number of topics to fit in the model.}

\item{tot_iter}{Number of iterations of the LDA inference.}

\item{tolerance}{Tolerance values of the LDA inference.}
}
\value{
The trajectory model
}
\description{
Inferring trajectories with cellTree

Will generate a trajectory using \href{https://doi.org/10.1186/s12859-016-1175-6}{cellTree with vem}. This method was wrapped inside a \href{https://github.com/dynverse/dynmethods/tree/master/containers/celltree_vem}{container}.
}
\details{
This methods was first wrapped inside R, see \link{ti_celltree_vem}

The method is described in: \href{https://doi.org/10.1186/s12859-016-1175-6}{duVerle, D.A., Yotsukura, S., Nomura, S., Aburatani, H., Tsuda, K., 2016. CellTree: an R/bioconductor package to infer the hierarchical structure of cell populations from single-cell RNA-seq data. BMC Bioinformatics 17.}
}
